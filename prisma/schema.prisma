// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  customCards   Card[]
  participatedRooms RoomParticipant[]
  createdRooms  Room[]    @relation("RoomHost")
  votes         Vote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Room {
  id          String    @id @default(cuid())
  name        String
  hostId      String? 
  host        User?     @relation("RoomHost", fields: [hostId], references: [id])
  participants RoomParticipant[]
  stories     Story[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  active      Boolean   @default(true)
  code        String    @unique
  anonymousParticipants AnonymousParticipant[]
}

model Story {
  id          String    @id @default(cuid())
  title       String
  roomId      String
  room        Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  votes       Vote[]
  finalScore  Float?
  createdAt   DateTime  @default(now())
  revealed    Boolean   @default(false)
  anonymousVotes AnonymousVote[]
}

model Vote {
  id          String    @id @default(cuid())
  storyId     String
  story       Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  value       Float
  createdAt   DateTime  @default(now())

  @@unique([storyId, userId])
}

model Card {
  id          String    @id @default(cuid())
  value       Float
  label       String?   
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RoomParticipant {
  id        String   @id @default(cuid())
  roomId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  room Room @relation(fields: [roomId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([roomId, userId])
  @@index([roomId])
  @@index([userId])
}

model AnonymousParticipant {
  id        String   @id @default(cuid())
  name      String
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id])
  votes     AnonymousVote[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([roomId])
}

model AnonymousVote {
  id          String    @id @default(cuid())
  storyId     String
  story       Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)
  participantId String
  participant AnonymousParticipant @relation(fields: [participantId], references: [id])
  value       Float
  createdAt   DateTime  @default(now())

  @@unique([storyId, participantId])
}
