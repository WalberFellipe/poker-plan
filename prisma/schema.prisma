// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  customCards       Card[]
  participatedRooms RoomParticipant[] @relation("RoomParticipation")
  createdRooms      Room[]    @relation("RoomHost")
  votes             Vote[]
  customDecks        CustomDeck[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Room {
  id                  String               @id @default(cuid())
  name                String
  createdAt          DateTime             @default(now())
  expiresAt          DateTime             
  stories            Story[]
  participants       RoomParticipant[]
  anonymousParticipants AnonymousParticipant[]
  ownerId            String
  owner              User                 @relation("RoomHost", fields: [ownerId], references: [id])
  deckValues         String[]

  @@index([ownerId])
  @@index([expiresAt])
}

model Story {
  id          String    @id @default(cuid())
  title       String
  roomId      String
  room        Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  votes       Vote[]
  finalScore  Float?
  createdAt   DateTime  @default(now())
  revealed    Boolean   @default(false)
  anonymousVotes AnonymousVote[]
}

model Vote {
  id            String   @id @default(cuid())
  value         Int
  userId        String
  storyId       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  story         Story    @relation(fields: [storyId], references: [id])
  user          User     @relation(fields: [userId], references: [id])

  @@unique([userId, storyId])
}

model Card {
  id          String    @id @default(cuid())
  value       Float
  label       String?   
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RoomParticipant {
  id        String   @id @default(cuid())
  roomId    String
  userId    String
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User     @relation("RoomParticipation", fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([roomId, userId])
  @@index([roomId])
  @@index([userId])
}

model AnonymousParticipant {
  id            String   @id @default(cuid())
  roomId        String
  name          String?
  room          Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  votes         AnonymousVote[]
  createdAt     DateTime @default(now())

  @@index([roomId])
}

model AnonymousVote {
  id            String   @id @default(cuid())
  value         Int
  participantId String
  storyId       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  story         Story    @relation(fields: [storyId], references: [id])
  participant   AnonymousParticipant @relation(fields: [participantId], references: [id])

  @@unique([participantId, storyId])
}

model CustomDeck {
  id        String   @id @default(cuid())
  name      String
  values    String[]
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
